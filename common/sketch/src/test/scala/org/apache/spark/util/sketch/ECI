+package com.optum.bds.brms.spark   2  +   3  +import org.apache.spark.{ SparkConf, SparkContext }   4  +import org.apache.spark._   5  +import org.apache.spark.sql.SQLContext   6  +import org.apache.spark.SparkContext._   7  +import org.apache.spark.sql.DataFrame   8  +import org.apache.spark.sql.hive.HiveContext   9  +import scala.collection.immutable.Set   10  +import org.apache.commons.lang.mutable.Mutable   11  +import scala.util.DynamicVariable   12  +import org.apache.hadoop.mapreduce.lib.partition.HashPartitioner   13  +import org.apache.spark.sql.Row   14  +import org.apache.spark.sql.types._   15  +   16  +case class inputschema(partn_nbr: String, cnsm_id: String, src_cd: String, lgcy_src_id: String)   17  +   18  +object ECIBuilder {   19  +  val conf = new SparkConf()   20  +  val sc = new SparkContext(conf)   21  +  val fn = new ECIFunctions()   22  +   23  +  val startTime = fn.getDate()   24  +  //reading the properties file and getting the settings   25  +  val database = sc.getConf.get("spark.db.name")   26  +  val hdfsServer = sc.getConf.get("spark.hdfs.server")   27  +  val hdfsOutputFilePath = sc.getConf.get("spark.hdfs.outputFilePath")   28  +  val inputFilePath = sc.getConf.get("spark.inputFilePath") //val inputFilePath ="hdfs:///datalake/other/cdb/app/eci_builder/spark_v3/input_landing"   29  +  val feedquery = sc.getConf.get("spark.input.query")   30  +  val queryStorePath = sc.getConf.get("spark.queryStorePath")   31  +  val failedInputPath = sc.getConf.get("spark.failedInputRecordsPath")   32  +  val eciFuncs = new ECIFunctions()   33  +   34  +  //creating hive context   35  +  val hcont = new HiveContext(sc)   36  +  val eci_rec_typ_df = hcont.read.table("cdb.eci_rec_typ_orc")   37  +  val f = org.apache.spark.sql.functions   38  +   39  +  val rec_types = eci_rec_typ_df.where(eci_rec_typ_df("eci_rec_ces_ind") === "Y").select("ecirectypk")   40  +   41  +  val rec_t = rec_types.select(f.collect_set(rec_types("ecirectypk")))   42  +   43  +  val r = rec_t.first.get(0).asInstanceOf[Seq[String]].toSet   44  +   45  +  val f = org.apache.spark.sql.functions   46  +   47  +  //Input File containing Big 4 and the recordtypes   48  +  val inputFile = sc.textFile(inputFilePath)   49  +  //Query File with the recordid and the respective queries   50  +  val queryStore = sc.textFile(queryStorePath)   51  +    52  +  val schemaString = "partn_nbr,cnsm_id,src_cd,lgcy_src_id"   53  +  val fields = schemaString.split(',').map(fieldName => StructField(fieldName, StringType, nullable = true))   54  +  val schema = StructType(fields)   55  +   56  +  import hcont.implicits._   57  +   58  +  val inputRDD = inputFile.map {   59  +    inputLine =>   60  +      val linearr = inputLine.split(",")   61  +      val arrlen = (linearr).length   62  +      //val big4 = linearr.slice(0, 4).mkString("~")   63  +      val partn_nbr = linearr.slice(0, 1).mkString("")   64  +      val cnsm_id = linearr.slice(1, 2).mkString("")   65  +      val src_cd = linearr.slice(2, 3).mkString("")   66  +      val lgcy_src_id = linearr.slice(3, 4).mkString("")   67  +      Row(partn_nbr, cnsm_id, src_cd, lgcy_src_id) // => inputschema(partn_nbr,cnsm_id,src_cd,lgcy_src_id,recType)   68  +   69  +  }   70  +   71  +  val dfm = hcont.createDataFrame(inputRDD, schema)   72  +   73  +  val tableMap2 = CustomTableMap.tableMap   74  +  tableMap2.clear   75  +  queryStore.collect.foreach {   76  +    queryWithRecid =>   77  +   78  +      val queryRecidSplits = queryWithRecid.split('\u0001')   79  +      println(queryRecidSplits(0))   80  +      if (r.contains(queryRecidSplits(0))) {   81  +        val tempdf = hcont.sql(queryRecidSplits(3))   82  +        tableMap2.put(queryRecidSplits(0),   83  +          dfm.as("df1").join(tempdf.as("df2"),   84  +            f.trim($"df1.partn_nbr") === f.trim($"df2.partn_nbr") &&   85  +              f.trim($"df1.cnsm_id") === f.trim($"df2.cnsm_id") &&   86  +              f.trim($"df1.src_cd") === f.trim($"df2.src_cd") &&   87  +              f.trim($"df1.lgcy_src_id") === f.trim($"df2.lgcy_src_id"), "leftouter"))   88  +        println(queryRecidSplits(0) + " loaded")   89  +      } else {   90  +        println(queryRecidSplits(0) + " query not working")   91  +        //println(queryRecidSplits(3))   92  +      }   93  +  }   94  +   95  +  val unioned = tableMap2.values.toSet.reduce(_ unionAll _)   96  +   97  +  //val querybroadcast = sc.broadcast(queryrdd.collectAsMap())   98  +   99  +  val recTypExist = querybroadcast.value.keys.toSeq   100  +  //validating the input according to the requirement   101  +  val validInputFile = inputFile.map {   102  +    line =>   103  +      val temp = fn.validator(line, recTypExist)   104  +      temp(1)   105  +  }.filter { _.nonEmpty }   106  +   107  +  val failedInputFile = inputFile.map {   108  +    line =>   109  +      val temp = fn.validator(line, recTypExist)   110  +      temp(0)   111  +  }.filter { _.nonEmpty }   112  +   113  +  fn.cleanOutputPath(hdfsServer, failedInputPath)   114  +  failedInputFile.coalesce(1).saveAsTextFile(failedInputPath)   115  +  //transforming the inputFile to converting it into different pairs of Big4 and record id from   116  +  //(Big4 1,recordid 1,recordid 2,recordid N) to (Big4 1,recordid 1)(Big4 1,recordid 2)(Big4 1,recordid N)   117  +  val custDS = CustomDS.dfMap   118  +   119  +  val df100 = hcont.sql("SELECT cnsm.partn_nbr,cnsm.cnsm_id,cnsm.src_cd,cnsm.lgcy_src_id, '100' as rec_typ, concat(rpad(coalesce(trim(cnsm.src_cd), ''), 2, ' '), rpad(coalesce(trim(cnsm.lgcy_src_id), ''), 60, ' '), '100', rpad(regexp_replace(regexp_replace(cast(case when (cnsm.ROW_TMSTMP >= ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P) AND (cnsm.ROW_TMSTMP >= ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M) AND (cnsm.ROW_TMSTMP >= COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (cnsm.ROW_TMSTMP >= COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (cnsm.ROW_TMSTMP >= COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (cnsm.ROW_TMSTMP >= COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) THEN cnsm.ROW_TMSTMP when (ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P >= cnsm.ROW_TMSTMP) AND (ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P >= ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M) AND (ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P >= COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P >= COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P >= COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P >= COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) THEN ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P when (ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M >= cnsm.ROW_TMSTMP) AND (ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M >= ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P) AND (ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M >= COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M >= COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M >= COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M >= COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) THEN ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M when (COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= cnsm.ROW_TMSTMP) AND (COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P) AND (COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M) AND (COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) THEN COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) when (COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P) AND (COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M) AND (COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= cnsm.ROW_TMSTMP) AND (COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) THEN COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) when (COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P) AND (COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M) AND (COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= cnsm.ROW_TMSTMP) AND (COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) THEN COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) when (COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_P.ML_CNSM_ADR_ROW_TMSTMP_P) AND (COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= ML_CNSM_ADR_M.ML_CNSM_ADR_ROW_TMSTMP_M) AND (COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_P.ML_CNSM_TEL_P_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_A.ML_CNSM_TEL_A_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= COALESCE(ML_CNSM_TEL_C.ML_CNSM_TEL_C_ROW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp))) AND (COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) >= cnsm.ROW_TMSTMP) THEN COALESCE(XREF.ML_CNSM_XREF_TOW_TMSTMP, cast('1900-01-01 00:00:00' as timestamp)) else cast('1900-01-01 00:00:00' as timestamp) END as string), \":\",\".\"), \" \",\"-\"),26,'0'), rpad('',80, ' '), lpad(cast(cnsm.src_cdb_xref_id as string), 10, '0'), lpad('', 10, '0') , lpad('', 10, '0') , lpad(cast(cnsm.cnsm_id as string),10, '0'), lpad(cast(cnsm.partn_nbr as string),9, '0'), lpad('', 10, '0'), '01265',case when cnsm.row_sts_cd = 'A' then 'N' when cnsm.row_sts_cd = 'D' then 'Y' when cnsm.row_sts_cd = 'X' then 'Y' end, RPAD(COALESCE(TRIM(CNSM.LST_NM), ''),35, ' '), RPAD(COALESCE(TRIM(CNSM.FST_NM), ''), 25, ' '), RPAD(COALESCE(TRIM(CNSM.MIDL_NM), ''), 25, ' '), RPAD(COALESCE(TRIM(CNSM.SLTN_TYP_CD), ''), 10, ' '), RPAD(COALESCE(TRIM(CNSM.NM_GEN_SUFX_TYP_CD), ''), 10, ' '), RPAD(COALESCE(TRIM(CNSM.PROT_HLTH_INFO_IND), ''),1,' '), RPAD(COALESCE(TRIM(CNSM.SOC_SEC_NBR), ''), 9, ' '), RPAD(COALESCE(TRIM(XREF.ALT_CNSM_ID), ''), 9, ' '), RPAD(COALESCE(TRIM(CNSM.GDR_TYP_CD), ''),1,' '), regexp_replace(cast(CNSM.BTH_DT as String), \"-\", \"\"), CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.STR_ADR_LN_1_TXT), ''), 55, ' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.STR_ADR_LN_1_TXT), ''), 55, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.STR_ADR_LN_2_TXT), ''), 55, ' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.STR_ADR_LN_2_TXT), ''), 55, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.CTY_NM), ''), 30, ' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.CTY_NM), ''), 30, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.ST_CD), ''),2,' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.ST_CD), ''), 2, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.PST_CD), ''), 10, ' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.PST_CD), ''), 10, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.PST_EXT_CD), ''), 4, ' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.PST_EXT_CD), ''), 4, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.CNTRY_CD), ''), 4, ' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.CNTRY_CD), ''), 4, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.PST_ADR_TYP_CD), ''),1,' ') ELSE RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD), ''),1,' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.STR_ADR_LN_1_TXT), ''), 55, ' ') ELSE RPAD('', 55, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.STR_ADR_LN_2_TXT), ''), 55, ' ') ELSE RPAD('', 55, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.CTY_NM), ''), 30, ' ') ELSE RPAD('', 30, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.ST_CD), ''), 2, ' ') ELSE RPAD('', 2, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.PST_CD), ''), 10, ' ') ELSE RPAD('', 10, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.PST_EXT_CD), ''), 4, ' ') ELSE RPAD('', 4, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.CNTRY_CD), ''), 4, ' ') ELSE RPAD('', 4, ' ') END, CASE WHEN TRIM(ML_CNSM_ADR_P.PST_ADR_TYP_CD) IS NOT NULL THEN RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.PST_ADR_TYP_CD), ''),1,' ') ELSE ' ' END, RPAD(COALESCE(TRIM(ML_CNSM_TEL_P.TEL_NBR), ''), 10, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_ALT_MBR_ID), ''), 30, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_SBSCR_ID), ''), 30, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_MBR_ID), ''), 30, ' '), RPAD(COALESCE(TRIM(CNSM.SBSCR_REL_TYP_CD), ''), 3, ' '), RPAD(COALESCE(TRIM(ML_CNSM_TEL_A.TEL_NBR), ''), 10, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_POL_NBR), ''), 15, ' '), RPAD(COALESCE(TRIM(CNSM.TOPS_REL_CD), ''), 2, ' '), coalesce(regexp_replace(cast(CNSM.EE_STRT_DT as String), \"-\",\"\"),'99999999'),RPAD(COALESCE(TRIM(CNSM.EE_STS_TYP_CD), ''),1,' '), RPAD(COALESCE(TRIM(CNSM.SPCL_PROC_HNDL_CD), ''),1,' '), rpad('',3, ' '), rpad('',7, ' '), RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.RES_MKT_SITE_NBR), ''), 7, ' '), RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.RES_MKT_SITE_NBR), ''), 7, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_CUST_NBR), ''), 15, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_CLSS_ID), ''), 2, ' '), LPAD(coalesce(cast(CNSM.WRK_HR_NBR as string), ''), 3, '0'), LPAD(coalesce(CAST(CNSM.SLRY_AMT AS STRING), ''), 9, '0'), RPAD(COALESCE(TRIM(CNSM.SLRY_TYP_CD), ''),1,' '), RPAD(COALESCE(TRIM(CNSM.TBCC_USE_IND), ''),1,' '), RPAD(COALESCE(TRIM(CNSM.TOPS_SEQ_NBR), ''), 2, ' '), RPAD(COALESCE(TRIM(CNSM.MRTL_STS_TYP_CD), ''),1,' '), coalesce(regexp_replace(cast(CNSM.TOPS_ORIG_COV_EFF_DT as String), \"-\", \"\"), '99999999'), RPAD(COALESCE(TRIM(CNSM.PRIME_DEPN_CD), ''), 2, ' '), RPAD(COALESCE(TRIM(CNSM.QMCSO_IND), ''),1,' '), RPAD(COALESCE(TRIM(CNSM.EMPMT_CLSS_1_TYP_CD), ''),2, ' '), RPAD(COALESCE(TRIM(CNSM.EMPMT_CLSS_2_TYP_CD), ''), 2, ' '), RPAD(COALESCE(TRIM(CNSM.EMPMT_CLSS_3_TYP_CD), ''), 2, ' '), coalesce(regexp_replace(cast(ML_CNSM_ADR_P.PST_ADR_EFF_DT as String), \"-\", \"\"),lpad('',8,' ')), coalesce(regexp_replace(cast(ML_CNSM_ADR_M.PST_ADR_EFF_DT as String), \"-\", \"\"), lpad('',8,' ')), RPAD(COALESCE(TRIM(ML_CNSM_TEL_C.TEL_NBR), ''), 10, ' '), RPAD(COALESCE(TRIM(CNSM.DEPT_NBR), ''), 20, ' '), RPAD(COALESCE(TRIM(CNSM.DIV_NBR), ''), 20, ' '), rpad('', 60, ' '), rpad('', 31, ' '), RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.CNTRY_SUBDIV_CD), ''), 3, ' '), RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.CNTRY_SUBDIV_CD), ''), 3, ' '), RPAD(COALESCE(TRIM(CNSM.FST_NM), ''), 35, ' '), RPAD(COALESCE(TRIM(CNSM.LST_NM), ''), 60, ' '), RPAD(COALESCE(TRIM(ML_CNSM_ADR_P.PST_CD), ''), 15, ' '), RPAD(COALESCE(TRIM(ML_CNSM_ADR_M.PST_CD), ''), 15, ' '), RPAD(COALESCE(TRIM(ML_CNSM_TEL_P.TEL_NBR), ''), 20, ' '), RPAD(COALESCE(TRIM(ML_CNSM_TEL_A.TEL_NBR), ''), 20, ' '), RPAD(COALESCE(TRIM(ML_CNSM_TEL_C.TEL_NBR), ''), 20, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_SBSCR_ID), ''), 50, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_MBR_ID), ''), 50, ' '), RPAD(COALESCE(TRIM(CNSM.LGCY_ALT_MBR_ID), ''), 50, ' '), RPAD('', 26, ' '), RPAD('', 4, ' ') , RPAD('', 2, ' ') , '' , RPAD('', 3, ' ') , RPAD('', 10, ' ') , RPAD(COALESCE(TRIM(CNSM.ENRL_RSN_TYP_CD), ''), 2, ' '), RPAD('', 3, ' ') , RPAD(COALESCE(TRIM(CNSM.ORG_TYP_CD), ''), 3, ' '), RPAD(COALESCE(TRIM(ML_CNSM_TEL_P.TEL_TYP_CD), ''), 2, ' '), RPAD(COALESCE(TRIM(ML_CNSM_TEL_A.TEL_TYP_CD), ''), 2, ' '), RPAD('', 38, ' ')) AS layout FROM ( SELECT * FROM CDB.L_CNSM_SRCH_ORC ) CNSM  left outer JOIN ( SELECT PARTN_NBR, CNSM_ID, SRC_CD, LGCY_SRC_ID, PST_ADR_TYP_CD, STR_ADR_LN_1_TXT, STR_ADR_LN_2_TXT, CTY_NM, ST_CD, PST_CD, PST_EXT_CD, CNTRY_CD, ROW_TMSTMP AS ML_CNSM_ADR_ROW_TMSTMP_P, RES_MKT_SITE_NBR, PST_ADR_EFF_DT, CNTRY_SUBDIV_CD FROM CDB.ML_CNSM_ADR_ORC WHERE TRIM(PST_ADR_TYP_CD) = 'P') ML_CNSM_ADR_P ON CNSM.PARTN_NBR = ML_CNSM_ADR_P.PARTN_NBR AND CNSM.CNSM_ID = ML_CNSM_ADR_P.CNSM_ID AND TRIM(CNSM.SRC_CD) = TRIM(ML_CNSM_ADR_P.SRC_CD) AND TRIM(CNSM.LGCY_SRC_ID) = TRIM(ML_CNSM_ADR_P.LGCY_SRC_ID) left outer JOIN ( SELECT PARTN_NBR, CNSM_ID, SRC_CD, LGCY_SRC_ID, PST_ADR_TYP_CD, STR_ADR_LN_1_TXT, STR_ADR_LN_2_TXT, CTY_NM, ST_CD, PST_CD, PST_EXT_CD, CNTRY_CD, ROW_TMSTMP AS ML_CNSM_ADR_ROW_TMSTMP_M, RES_MKT_SITE_NBR, PST_ADR_EFF_DT, CNTRY_SUBDIV_CD FROM CDB.ML_CNSM_ADR_ORC WHERE TRIM(PST_ADR_TYP_CD) = 'M') ML_CNSM_ADR_M ON CNSM.PARTN_NBR = ML_CNSM_ADR_M.PARTN_NBR AND CNSM.CNSM_ID = ML_CNSM_ADR_M.CNSM_ID AND TRIM(CNSM.SRC_CD) = TRIM(ML_CNSM_ADR_M.SRC_CD) AND TRIM(CNSM.LGCY_SRC_ID) = TRIM(ML_CNSM_ADR_M.LGCY_SRC_ID) LEFT OUTER JOIN ( SELECT PARTN_NBR, CNSM_ID, SRC_CD, LGCY_SRC_ID, TEL_TYP_CD, TEL_NBR, ROW_TMSTMP AS ML_CNSM_TEL_P_ROW_TMSTMP FROM CDB.ML_CNSM_TEL_ORC WHERE TRIM(TEL_TYP_CD) = 'P') ML_CNSM_TEL_P ON CNSM.PARTN_NBR = ML_CNSM_TEL_P.PARTN_NBR AND CNSM.CNSM_ID = ML_CNSM_TEL_P.CNSM_ID AND TRIM(CNSM.SRC_CD) = TRIM(ML_CNSM_TEL_P.SRC_CD) AND TRIM(CNSM.LGCY_SRC_ID) = TRIM(ML_CNSM_TEL_P.LGCY_SRC_ID) LEFT OUTER JOIN ( SELECT PARTN_NBR, CNSM_ID, SRC_CD, LGCY_SRC_ID, TEL_TYP_CD, TEL_NBR, ROW_TMSTMP AS ML_CNSM_TEL_A_ROW_TMSTMP FROM CDB.ML_CNSM_TEL_ORC WHERE TRIM(TEL_TYP_CD) = 'A' ) ML_CNSM_TEL_A ON CNSM.PARTN_NBR = ML_CNSM_TEL_A.PARTN_NBR AND CNSM.CNSM_ID = ML_CNSM_TEL_A.CNSM_ID AND TRIM(CNSM.SRC_CD) = TRIM(ML_CNSM_TEL_A.SRC_CD) AND TRIM(CNSM.LGCY_SRC_ID) = TRIM(ML_CNSM_TEL_A.LGCY_SRC_ID) LEFT OUTER JOIN ( SELECT PARTN_NBR, CNSM_ID, SRC_CD, LGCY_SRC_ID, TEL_TYP_CD, TEL_NBR, ROW_TMSTMP AS ML_CNSM_TEL_C_ROW_TMSTMP FROM CDB.ML_CNSM_TEL_ORC WHERE  TRIM(TEL_TYP_CD) = 'C') ML_CNSM_TEL_C ON CNSM.PARTN_NBR = ML_CNSM_TEL_C.PARTN_NBR AND CNSM.CNSM_ID = ML_CNSM_TEL_C.CNSM_ID AND TRIM(CNSM.SRC_CD) = TRIM(ML_CNSM_TEL_C.SRC_CD) AND TRIM(CNSM.LGCY_SRC_ID) = TRIM(ML_CNSM_TEL_C.LGCY_SRC_ID) LEFT OUTER JOIN ( SELECT PARTN_NBR, CNSM_ID, SRC_CD, LGCY_SRC_ID, ALT_CNSM_ID, ROW_TMSTMP AS ML_CNSM_XREF_TOW_TMSTMP FROM CDB.ML_CNSM_XREF_ORC WHERE TRIM(ALT_ID_TYP_CD) = ('SSB')) XREF ON CNSM.PARTN_NBR = XREF.PARTN_NBR AND CNSM.CNSM_ID = XREF.CNSM_ID AND TRIM(CNSM.SRC_CD) = TRIM(XREF.SRC_CD) AND TRIM(CNSM.LGCY_SRC_ID) = TRIM(XREF.LGCY_SRC_ID)")   120  +  val df102 = hcont.sql("select partn_nbr, cnsm_id, trim(src_cd) as src_cd , trim(lgcy_src_id) as lgcy_src_id, '102' as rec_typ,concat(rpad(coalesce(trim(src_cd), ''), 2, ' '), rpad(coalesce(trim(lgcy_src_id), ''), 60, ' ') , '102' , rpad(regexp_replace(regexp_replace(cast(row_tmstmp as string), \":\",\".\"), \" \",\"-\"),26,'0'), rpad('',80, ' '), lpad(cast(src_cdb_xref_id as string), 10, '0'), lpad('', 10, '0'), lpad('', 10, '0') , lpad(cast(cnsm_id as string),10, '0') , lpad(cast(partn_nbr as string),9, '0') , lpad('', 10, '0') , '00307', case when row_sts_cd = 'A' then 'N' when row_sts_cd = 'X' then 'Y' when row_sts_cd = 'D' then 'Y' end, rpad(coalesce(trim(enty_typ_cd), ''),3, ' '), rpad(coalesce(trim(enty_id_typ_cd), ''),3, ' '), rpad(coalesce(trim(enty_id), ''),20, ' '), rpad(coalesce(trim(enty_nm), ''),60, ' '), rpad(coalesce(trim(brkr_acct_nbr), ''),35, ' '), rpad(coalesce(trim(brkr_acct2_nbr), ''),35, ' '), rpad('', 3, ' '), rpad('', 147, ' ') ) as layout from cdb.cnsm_brkr_enty_orc")   121  +   122  +  val unionseq = Set(df100, df102)   123  +  val uniondf = unionseq.reduce(_ unionAll _) //df100.unionAll(df102)   124  +   125  +  val joined = dfm.as("df1").join(unioned.as("df2"),   126  +    f.trim($"df1.partn_nbr") === f.trim($"df2.partn_nbr") &&   127  +      f.trim($"df1.cnsm_id") === f.trim($"df2.cnsm_id") &&   128  +      f.trim($"df1.src_cd") === f.trim($"df2.src_cd") &&   129  +      f.trim($"df1.lgcy_src_id") === f.trim($"df2.lgcy_src_id"), "leftouter").select("df2.layout").coalesce(20).flatMap { x => x.toSeq }   130  +  joined.saveAsTextFile("hdfs:///datalake/other/cdb/app/eci_builder/spark_v3/opt/eciout")   131  +   132  +  val dfToRun = inputRDD.map { inputTuple =>   133  +    inputTuple._2   134  +  }.toArray().toSet   135  +   136  +  val tableMap = new scala.collection.mutable.HashMap[String, DataFrame]   137  +   138  +  dfToRun.foreach {   139  +    recId =>   140  +      println("loading recordId: " + recId)   141  +      val newQuery = querybroadcast.value.getOrElse(recId, "None").replaceAll("%SCHEMA%", database)   142  +      println("query created:" + newQuery)   143  +      tableMap2.put("df" + recId, hcont.sql(newQuery).cache())   144  +  }   145  +   146  +  custDS.clear()   147  +  inputRDD.collect.foreach {   148  +    recIdTuple =>   149  +      val mapOpt = custDS.getOrElse(recIdTuple._2, "")   150  +      if (mapOpt.isEmpty()) {   151  +        custDS.put(recIdTuple._2, recIdTuple._1)   152  +      } else {   153  +        custDS.put(recIdTuple._2, custDS.getOrElse(recIdTuple._2, "") + "," + recIdTuple._1)   154  +      }   155  +  }   156  +  val custDSArray = custDS.toArray   157  +   158  +  val output = sc.parallelize(custDSArray.flatMap {   159  +    recAndBig4S =>   160  +      val recId = recAndBig4S._1   161  +      val big4Ssplit = recAndBig4S._2.split(",")   162  +   163  +      var big4String = ""   164  +      big4Ssplit.foreach {   165  +        big4WOsplit =>   166  +          val big4split = big4WOsplit.split("~")   167  +          val partn_nbr = big4split.slice(0, 1)(0)   168  +          val cnsm_id = big4split.slice(1, 2)(0)   169  +          val src_cd = big4split.slice(2, 3)(0)   170  +          val lgcy_src_id = big4split.slice(3, 4)(0)   171  +          if (big4String.isEmpty()) {   172  +            big4String = "partn_nbr=" + partn_nbr + " AND cnsm_id=" + cnsm_id + " AND TRIM(src_cd)=\'" + src_cd + "\' AND TRIM(lgcy_src_id)=\'" + lgcy_src_id + "\'"   173  +          } else {   174  +            big4String = big4String + " OR " + "partn_nbr=" + partn_nbr + " AND cnsm_id=" + cnsm_id + " AND TRIM(src_cd)=\'" + src_cd + "\' AND TRIM(lgcy_src_id)=\'" + lgcy_src_id + "\'"   175  +          }   176  +      }   177  +      val grouped = tableMap.get("df" + recId).get.select("*").filter { big4String }.orderBy("partn_nbr", "cnsm_id", "src_cd", "lgcy_src_id")   178  +      grouped.map { x => (x.get(0).toString + x.get(1), x.mkString("")) }.collect   179  +  }).groupByKey()   180  +   181  +  val finaloutput = output.flatMap {   182  +    record =>   183  +      record._2.map {   184  +        iteratedArray => iteratedArray   185  +      }   186  +  }   187  +   188  +  fn.cleanOutputPath(hdfsServer, hdfsOutputFilePath + "/passed")   189  +  finaloutput.coalesce(1).saveAsTextFile(hdfsOutputFilePath + "/passed")   190  +  val endTime = fn.getDate()   191  +  println("endTime: " + endTime)   192  +  println("Time taken to process: " + finaloutput.count() + "passed Big4/Records" + " is " + fn.getTimeDifference(startTime, endTime))   193  +   194  +  //  val groupedData=tableMap.get("df101").get.select("*").filter{"partn_nbr=3 AND cnsm_id=299419483 AND trim(src_cd)='CS' AND trim(lgcy_src_id)='07554810010000744800001' OR partn_nbr=2 AND cnsm_id=0299581222 AND trim(src_cd)='CS' AND trim(lgcy_src_id)='09027280010072497100001'"}.groupBy("partn_nbr","cnsm_id","src_cd","lgcy_src_id").count().show()   195  +  //  val grouped=tableMap.get("df101").get.select("*").filter{"partn_nbr=3 AND cnsm_id=299419483 AND trim(src_cd)='CS' AND trim(lgcy_src_id)='07554810010000744800001' OR partn_nbr=2 AND cnsm_id=0299581222 AND trim(src_cd)='CS' AND trim(lgcy_src_id)='09027280010072497100001'"}.orderBy("partn_nbr","cnsm_id","src_cd","lgcy_src_id")   196  +  //   197  +  //  val result=grouped.map { x => (x.get(0).toString+x.get(1),x.mkString("")) }.collect   198  +   199  +  //val df=dfMap.toMap   200  +   201  +}   202  +   203  +object CustomDS extends Serializable {   204  +  val dfMap = new scala.collection.mutable.HashMap[String, String]   205  +}   206  +   207    +object CustomTableMap extends Serializable {   208  +  val tableMap = new scala.collection.mutable.HashMap[String, DataFrame]   209  +}  
